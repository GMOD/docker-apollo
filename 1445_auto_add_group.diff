diff --git a/grails-app/services/org/bbop/apollo/PermissionService.groovy b/grails-app/services/org/bbop/apollo/PermissionService.groovy
index 9d1845a..04c7959 100644
--- a/grails-app/services/org/bbop/apollo/PermissionService.groovy
+++ b/grails-app/services/org/bbop/apollo/PermissionService.groovy
@@ -528,6 +528,9 @@ class PermissionService {
                 def authenticationService
                 if("remoteUserAuthenticatorService" == auth.className ){
                     authenticationService = remoteUserAuthenticatorService
+                    if (auth.params.containsKey("default_group")) {
+                        authenticationService.setDefaultGroup(auth.params.get("default_group"))
+                    }
                 }
                 else
                 if("usernamePasswordAuthenticatorService" == auth.className ){
diff --git a/grails-app/services/org/bbop/apollo/authenticator/RemoteUserAuthenticatorService.groovy b/grails-app/services/org/bbop/apollo/authenticator/RemoteUserAuthenticatorService.groovy
index 34f5d2e..5b99e6c 100644
--- a/grails-app/services/org/bbop/apollo/authenticator/RemoteUserAuthenticatorService.groovy
+++ b/grails-app/services/org/bbop/apollo/authenticator/RemoteUserAuthenticatorService.groovy
@@ -8,6 +8,7 @@ import org.apache.shiro.crypto.hash.Sha256Hash
 import org.apache.shiro.subject.Subject
 import org.bbop.apollo.Role
 import org.bbop.apollo.User
+import org.bbop.apollo.UserGroup
 import org.bbop.apollo.UserService
 import org.bbop.apollo.gwt.shared.ClientTokenGenerator
 import org.bbop.apollo.gwt.shared.FeatureStringEnum
@@ -17,6 +18,8 @@ import javax.servlet.http.HttpServletRequest
 @Transactional
 class RemoteUserAuthenticatorService implements AuthenticatorService {
 
+    def default_group
+
     def authenticate(HttpServletRequest request) {
         User user
         UsernamePasswordToken authToken = new UsernamePasswordToken()
@@ -33,7 +36,7 @@ class RemoteUserAuthenticatorService implements AuthenticatorService {
 //            } else {
 //            remoteUser = request.getHeader(FeatureStringEnum.REMOTE_USER.value)
 //            }
-            
+
             remoteUser = request.getHeader(FeatureStringEnum.REMOTE_USER.value)
             log.warn "Remote user found [${remoteUser}]"
             if (!remoteUser) {
@@ -61,6 +64,22 @@ class RemoteUserAuthenticatorService implements AuthenticatorService {
                 log.debug "adding role: ${role}"
                 user.addToRoles(role)
                 role.addToUsers(user)
+
+                if (this.default_group != null) {
+                    log.debug "adding user to default group: ${this.default_group}"
+                    UserGroup userGroup = UserGroup.findByName(this.default_group)
+
+                    if (userGroup == null) {
+                        userGroup = new UserGroup(
+                                name: this.default_group
+                        ).save(flush: true)
+
+                        log.info "Created new default group ${this.default_group}"
+                    }
+
+                    user.addToUserGroups(userGroup)
+                }
+
                 role.save()
                 user.save(flush: true)
                 log.warn "User created ${user}"
@@ -97,4 +116,8 @@ class RemoteUserAuthenticatorService implements AuthenticatorService {
         // token is ignored
         return authToken(request)
     }
+
+    def setDefaultGroup(String default_group) {
+        this.default_group = default_group
+    }
 }
